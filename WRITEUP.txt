

CS4240
Project Phase 1

Jack Bonaguro, Thomas Bright, & Sai Gundlapalli

This Tiger compiler front-end relies on two parts: the scanner and parser. The scanner performs lexical analysis and passes lexical Tokens to the parser. The parser performs semantic analysis. The parser also serves as the body of the front-end, calling an instance of the scanner and a semantic analyzer. Said analyzer relies on a "symbol table," further explained below.

The symbol table is implemented in a split table fashion, dividing tables between identifiers and types. Firstly,  there is an IdentifierTableList object that creates a new table, an IdentifierTable. When a new scope is entered, the List creates a new Table and links it to the previous. The new scope's table becomes the "head" of the IdentifierTableList. The program using the Table will need to update its pointer to point to the current head.


 

The Identifier Table object is backed by a hashmap of int keys and IdentifierTableEntry values. The IdentifierTableEntry object stores necessary information, such as typeId and name. The IdentifierTable stores new entry objects in the hashmap by creating a hashcode of the entry and using it as the value's key


.


Types are referenced on a TypeTable, which is a hashmap that stores a TypetTableEntry and uses the TypeTableEntry's hashcode as a key.

BUILD & RUN

The project uses the maven management tool. To build it, navigate to the directory "cs4240/tiger" and use the command

	mvn package

To run, navigate to the "tiger" directory (within the "main" directory) use the command
	
	java -cp target/tiger-1.0-SNAPSHOT.jar com.tiger.compiler.Comp <testfile>